<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Filtering on OmicsDI Blog</title>
    <link>https://omicsdi.github.io/tags/filtering/feed/index.xml</link>
    <description>Recent content in Filtering on OmicsDI Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://omicsdi.github.io/tags/filtering/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Filtering search results</title>
      <link>https://omicsdi.github.io/post/filter-results/</link>
      <pubDate>Mon, 20 Feb 2017 14:04:54 +0000</pubDate>
      
      <guid>https://omicsdi.github.io/post/filter-results/</guid>
      <description>

&lt;p&gt;The search results can be filtered or refined using different &lt;code&gt;filters&lt;/code&gt; or &lt;code&gt;terms&lt;/code&gt; (Figure 1).
The OmicsDI web application supports at the moment nine different refinements: &lt;code&gt;Omics Type&lt;/code&gt;, &lt;code&gt;repository/database&lt;/code&gt;,
&lt;code&gt;Organisms&lt;/code&gt;, &lt;code&gt;Tissue, diseases&lt;/code&gt;,  &lt;code&gt;Modifications (proteomics)&lt;/code&gt;, &lt;code&gt;Instruments and platforms&lt;/code&gt;, &lt;code&gt;Publication data&lt;/code&gt;,
&lt;code&gt;Technology type&lt;/code&gt;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://omicsdi.github.io/media/filtering-results.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Figure 1: Filtering results of Search in the Browse Page&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;&lt;/br&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h2 id=&#34;filter-box&#34;&gt;Filter Box&lt;/h2&gt;


&lt;figure class=&#34;left&#34;&gt;
    
        &lt;img src=&#34;https://omicsdi.github.io/media/filter-box-typing.png&#34; width=&#34;300&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Figure 2: Tissue Filter Box&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Each &lt;code&gt;Filter Box&lt;/code&gt; shows the number of datasets within each category (e.g tissue type). The &lt;code&gt;user&lt;/code&gt; can search in the  &lt;strong&gt;textfield&lt;/strong&gt;
for a certain category and the system will filter the categories by the keywords the user specifies. For example (&lt;strong&gt;Figure 2&lt;/strong&gt;), if the user is interested
in &lt;code&gt;brain&lt;/code&gt; tissue, then s/he can see all the tissues containing the keyword &lt;code&gt;brain&lt;/code&gt;.&lt;/p&gt;


Notice that most of the filters are free text based meaning that their values rely on the
annotations provided by the specific databases.

OmicsDI Team is always improving the automatic annotation system to move more attributes/properties of the dataset
from Free-Text to ontology-based values.


&lt;p&gt;&lt;/br&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h2 id=&#34;ranking-results&#34;&gt;Ranking Results&lt;/h2&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://omicsdi.github.io/media/ranking.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Figure 3: Ranking the Search Results&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;The final results of the search can be sorted by three different categories: &lt;code&gt;Accession&lt;/code&gt;, &lt;code&gt;Relevance&lt;/code&gt;, &lt;code&gt;Publication Date&lt;/code&gt;. The
&lt;code&gt;Accession&lt;/code&gt; is the accession of the datasets in the system; the &lt;code&gt;Relevance&lt;/code&gt; is how close is the dataset to specific query; the
&lt;code&gt;Publication Date&lt;/code&gt; sort the datasets by publication date.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Relevance&lt;/strong&gt;&lt;/p&gt;



The actual search is done via a call to Apache Lucene, which takes two arguments: the query and an upper bound on the number of hits (datasets) to return.
Lucene scoring uses a combination of the Vector Space Model (VSM) of Information Retrieval and the Boolean model to determine how relevant a given Document is to a User&#39;s query. In general, the idea behind the VSM is the more times a query term appears in a document relative to the number of times the term appears in all the documents in the collection, the more relevant that document is to the query. It uses the Boolean model to first narrow down the documents that need to be scored based on the use of boolean logic in the Query specification. Lucene also adds some capabilities and refinements onto this model to support boolean and fuzzy searching, but it essentially remains a VSM based system at the heart.




</description>
    </item>
    
  </channel>
</rss>